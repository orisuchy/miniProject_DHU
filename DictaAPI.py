import requests
import json

url = "https://nakdan-4-0.loadbalancer.dicta.org.il/addnikud"

morph_dict = {'PREFIX_FUNCTION_CONJUNCTION': 2, 'PREFIX_FUNCTION_DEFINITEARTICLE': 4,
              'PREFIX_FUNCTION_INTERROGATIVE': 16, 'PREFIX_FUNCTION_PREPOSITION': 64,
              'PREFIX_FUNCTION_RELATIVIZER_SUBORDINATINGCONJUNCTION': 256, 'PREFIX_FUNCTION_TEMPORALSUBCONJ': 512,
              'PREFIX_FUNCTION_ADVERB': 1024, 'PREFIX_MASK': 1878, 'BASEFORM_POS': 2031616, 'BASEFORM_POS_CONTINUE': 0,
              'BASEFORM_POS_ADJECTIVE': 65536, 'BASEFORM_POS_ADVERB': 131072, 'BASEFORM_POS_CONJUNCTION': 196608,
              'BASEFORM_POS_AT_PREP': 262144, 'BASEFORM_POS_NEGATION': 327680, 'BASEFORM_POS_NOUN': 393216,
              'BASEFORM_POS_NUMERAL': 458752, 'BASEFORM_POS_PREPOSITION': 524288, 'BASEFORM_POS_PRONOUN': 589824,
              'BASEFORM_POS_PROPERNAME': 655360, 'BASEFORM_POS_CITATION': 720896, 'BASEFORM_POS_INITIALISM': 786432,
              'BASEFORM_POS_VERB': 851968, 'BASEFORM_POS_PUNCTUATION': 917504, 'BASEFORM_POS_INTERROGATIVE': 983040,
              'BASEFORM_POS_INTERJECTION': 1048576, 'BASEFORM_POS_UNKNOWN': 1114112, 'BASEFORM_POS_QUANTIFIER': 1179648,
              'BASEFORM_POS_EXISTENTIAL': 1245184, 'BASEFORM_POS_MODAL': 1310720, 'BASEFORM_POS_PREFIX': 1376256,
              'BASEFORM_POS_URL': 1441792, 'BASEFORM_POS_FOREIGN': 1507328, 'BASEFORM_POS_JUNK': 1572864,
              'BASEFORM_POS_UNCLEAR': 1638400, 'BASEFORM_POS_PARTICIPLE': 1703936, 'BASEFORM_POS_COPULA': 1769472,
              'BASEFORM_POS_REF': 1835008, 'BASEFORM_POS_TITULAR': 1900544, 'BASEFORM_POS_SHEL_PREP': 1966080,
              'BASEFORM_POS_NONSTANDARD': 2031616, 'BASEFORM_GENDER': 6291456, 'BASEFORM_GENDER_MASCULINE': 2097152,
              'BASEFORM_GENDER_FEMININE': 4194304, 'BASEFORM_GENDER_MASCULINEFEMININE': 6291456,
              'BASEFORM_NUMBER': 117440512, 'BASEFORM_NUMBER_SINGULAR': 16777216, 'BASEFORM_NUMBER_PLURAL': 33554432,
              'BASEFORM_NUMBER_DUAL': 50331648, 'BASEFORM_NUMBER_DUALPLURAL': 67108864,
              'BASEFORM_NUMBER_SINGULARPLURAL': 83886080, 'BASEFORM_PERSON': 939524096, 'BASEFORM_PERSON_1': 134217728,
              'BASEFORM_PERSON_2': 268435456, 'BASEFORM_PERSON_3': 402653184, 'BASEFORM_PERSON_ANY': 536870912,
              'BASEFORM_STATUS': 3221225472, 'BASEFORM_STATUS_ABSOLUTE': 1073741824,
              'BASEFORM_STATUS_CONSTRUCT': 2147483648, 'BASEFORM_STATUS_ABSOLUTECONSTRUCT': 3221225472,
              'BASEFORM_TENSE': 60129542144, 'BASEFORM_TENSE_PAST': 8589934592, 'BASEFORM_TENSE_ALLTIME': 17179869184,
              'BASEFORM_TENSE_PRESENT': 25769803776, 'BASEFORM_TENSE_FUTURE': 34359738368,
              'BASEFORM_TENSE_IMPERATIVE': 42949672960, 'BASEFORM_TENSE_TOINFINITIVE': 51539607552,
              'BASEFORM_TENSE_BAREINFINITIVE': 60129542144, 'SUFFIX_MASK': 278932356071424,
              'SUFFIX_FUNCTION': 206158430208, 'SUFFIX_FUNCTION_POSSESIVEPRONOUN': 68719476736,
              'SUFFIX_FUNCTION_ACCUSATIVENOMINATIVE': 137438953472, 'SUFFIX_FUNCTION_PRONOMIAL': 206158430208,
              'SUFFIX_GENDER': 1649267441664, 'SUFFIX_GENDER_MASCULINE': 549755813888,
              'SUFFIX_GENDER_FEMININE': 1099511627776, 'SUFFIX_GENDER_MASCULINEFEMININE': 1649267441664,
              'FULLFORM_ARAMAIC': 2199023255552, 'SUFFIX_NUMBER': 30786325577728,
              'SUFFIX_NUMBER_SINGULAR': 4398046511104, 'SUFFIX_NUMBER_PLURAL': 8796093022208,
              'SUFFIX_NUMBER_DUAL': 13194139533312, 'SUFFIX_NUMBER_DUALPLURAL': 17592186044416,
              'SUFFIX_NUMBER_SINGULARPLURAL': 21990232555520, 'SUFFIX_PERSON': 246290604621824,
              'SUFFIX_PERSON_1': 35184372088832, 'SUFFIX_PERSON_2': 70368744177664, 'SUFFIX_PERSON_3': 105553116266496,
              'SUFFIX_PERSON_ANY': 140737488355328, 'BASEFORM_BINYAN': 15762598695796736,
              'BASEFORM_BINYAN_PAAL': 2251799813685248, 'BASEFORM_BINYAN_NIFAL': 4503599627370496,
              'BASEFORM_BINYAN_HIFIL': 6755399441055744, 'BASEFORM_BINYAN_HUFAL': 9007199254740992,
              'BASEFORM_BINYAN_PIEL': 11258999068426240, 'BASEFORM_BINYAN_PUAL': 13510798882111488,
              'BASEFORM_BINYAN_HITPAEL': 15762598695796736}


def getMorphList(morphBits):
    morphList = []
    for key, val in morph_dict.items():
        if (val & morphBits == val):
            morphList.append(key)
    return morphList


def sendSentenceToDicta(sentence):
    headers = {'Content-Type': 'text/plain;charset=utf-8'}
    params = {
        "task": "nakdan",
        "genre": "modern",
        "data": sentence,
        "addmorph": True,
        "matchpartial": True,
        "keepmetagim": False,
        "keepqq": False,
    }
    r = requests.post(url, headers=headers, json=params)
    r.encoding = "UTF-8"
    rJson = r.json()
    wordNum = 0
    morphDict = dict()
    words = sentence.split(" ")
    print(len(words))
    print(rJson)
    print(len(rJson))
    for i in range(len(rJson)):
        if (rJson[i]["sep"] == True):
            continue
        morphBits = int(rJson[i]["options"][0]["morph"])
        morphList = getMorphList(morphBits)
        morphDict[words[wordNum]] = morphList
        wordNum += 1
    return morphDict


x = sendSentenceToDicta("יונתן הקטן רץ בבוקר אל הגן")
for i in x:
  print (i)
